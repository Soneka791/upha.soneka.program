# -*- coding: utf-8 -*-
"""Upha.Soneka-POS_Program-ITT102-SU2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wt7LSEVpPNMY9ju8wF1UWafUAkoRcwkj
"""

import random

# === Utility Functions ===
def generate_id(prefix):
    return prefix + str(random.randint(10000, 99999))

def is_time_available(schedule, date, time):
    return (date, time) not in schedule

# === Class Definitions ===
class Person:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender

    def display_info(self):
        print(f"Name: {self.name}, Age: {self.age}, Gender: {self.gender}")

class Patient(Person):
    def __init__(self, name, age, gender):
        super().__init__(name, age, gender)
        self.patient_id = generate_id("P")
        self.appointment_list = []

    def book_appointment(self, appointment):
        self.appointment_list.append(appointment)

    def view_profile(self):
        print("\n--- Patient Profile ---")
        self.display_info()
        print(f"Patient ID: {self.patient_id}")
        print("Appointments:")
        if self.appointment_list:
            for app in self.appointment_list:
                print(f"- With Dr. {app.doctor.name} on {app.date} at {app.time}")
        else:
            print("No appointments found.")

class Doctor(Person):
    def __init__(self, name, age, gender, speciality):
        super().__init__(name, age, gender)
        self.doctor_id = generate_id("D")
        self.speciality = speciality
        self.schedule = []

    def is_available(self, date, time):
        return is_time_available(self.schedule, date, time)

    def view_schedule(self):
        print(f"\n--- Schedule for Dr. {self.name} ---")
        if self.schedule:
            for date, time in self.schedule:
                print(f"- {date} at {time}")
        else:
            print("No appointments scheduled.")

class Appointment:
    def __init__(self, patient, doctor, date, time):
        self.appointment_id = generate_id("A")
        self.patient = patient
        self.doctor = doctor
        self.date = date
        self.time = time
        self.status = "Confirmed"

    def confirm(self):
        print(f"\nAppointment Confirmed! ID: {self.appointment_id}")

    def cancel(self):
        self.status = "Cancelled"
        print(f"\nAppointment {self.appointment_id} has been cancelled.")

#----------------------------------------------------
#CLASS: HospitalSystem
#Central System for managing patients, doctors, and appointments
#----------------------------------------------------

class HospitalSystem:
    def __init__(self):
        self.patients = {}
        self.doctors = {}
        self.appointments = {}

    def add_patient(self, name, age, gender):
        try:
            age = int(age)
            if age <= 0:
                raise ValueError
        except ValueError:
            print("Invalid age.")
            return
        if gender.lower() not in ['male', 'female']:
            print("Invalid gender.")
            return

        patient = Patient(name, age, gender)
        self.patients[patient.patient_id] = patient
        print(f"Patient Registered. ID: {patient.patient_id}")

    def add_doctor(self, name, age, gender, speciality):
        try:
            age = int(age)
            if age <= 0:
                raise ValueError
        except ValueError:
            print("Invalid age.")
            return
        if gender.lower() not in ['male', 'female']:
            print("Invalid gender.")
            return

        doctor = Doctor(name, age, gender, speciality)
        self.doctors[doctor.doctor_id] = doctor
        print(f"Doctor Added. ID: {doctor.doctor_id}")

    def book_appointment(self, patient_id, doctor_id, date, time):
        patient = self.patients.get(patient_id)
        doctor = self.doctors.get(doctor_id)
        if not patient or not doctor:
            print("Invalid patient or doctor ID.")
            return
        if not doctor.is_available(date, time):
            print("Doctor is already booked.")
            return

        appointment = Appointment(patient, doctor, date, time)
        self.appointments[appointment.appointment_id] = appointment
        patient.book_appointment(appointment)
        doctor.schedule.append((date, time))
        appointment.confirm()

    def cancel_appointment(self, appointment_id):
        appointment = self.appointments.get(appointment_id)
        if appointment:
            appointment.cancel()
        else:
            print("Appointment not found.")

    def generate_bill(self, appointment_id):
        appointment = self.appointments.get(appointment_id)
        if not appointment or appointment.status != "Confirmed":
            print("Appointment not valid.")
            return
        print("\n--- Hospital Bill ---")
        print("Port Global Hospital")
        print("Golden Way, St. Andrew | 658-334-8976")
        print("-------------------------------")
        print(f"Patient: {appointment.patient.name}")
        print(f"Doctor: {appointment.doctor.name}")
        print(f"Date & Time: {appointment.date} at {appointment.time}")
        consultation_fee = 3000
        print(f"Consultation Fee: ${consultation_fee}")
        try:
            extra = float(input("Enter additional fees: $"))
        except ValueError:
            print("Invalid input. Defaulting extra fee to $0.")
            extra = 0
        total = consultation_fee + extra
        print(f"Total Bill: ${total}")

def main():
    hospital = HospitalSystem()
    while True:
        print("\n=== Port Global Hospital Management System ===")
        print("1. Register New Patient")
        print("2. Add New Doctor")
        print("3. Book Appointment")
        print("4. Cancel Appointment")
        print("5. View Patient Profile")
        print("6. View Doctor Schedule")
        print("7. Generate Patient Bill")
        print("0. Exit")

        option = input("Choose an option: ").strip()

        if option == "1":
            name = input("Patient Name: ")
            age = input("Age: ")
            gender = input("Gender (Male/Female): ")
            hospital.add_patient(name, age, gender)

        elif option == "2":
            name = input("Doctor Name: ")
            age = input("Age: ")
            gender = input("Gender (Male/Female): ")
            speciality = input("Speciality: ")
            hospital.add_doctor(name, age, gender, speciality)

        elif option == "3":
            pid = input("Patient ID: ")
            did = input("Doctor ID: ")
            date = input("Date (dd-mm-yyyy): ")
            time = input("Time (HH:MM): ")
            hospital.book_appointment(pid, did, date, time)

        elif option == "4":
            aid = input("Appointment ID to cancel: ")
            hospital.cancel_appointment(aid)

        elif option == "5":
            pid = input("Patient ID: ")
            patient = hospital.patients.get(pid)
            if patient:
                patient.view_profile()
            else:
                print("Patient not found.")

        elif option == "6":
            did = input("Doctor ID: ")
            doctor = hospital.doctors.get(did)
            if doctor:
                doctor.view_schedule()
            else:
                print("Doctor not found.")

        elif option == "7":
            aid = input("Appointment ID: ")
            hospital.generate_bill(aid)

        elif option == "0":
            print("Goodbye!")
            break

        else:
            print("Invalid option.")

# 👇 Call this to start the system
main()

"""“I CERTIFY THAT I HAVE NOT GIVEN OR RECEIVED ANY UNAUTHORIZED ASSISTANCE ON THIS ASSIGNMENT”."""